// WARNING: DO NOT EDIT THIS FILE, IT IS AUTOGENERATED
module.exports = {
  addonType: "behavior",
  id: "piranha305_experience",
  name: "Experience",
  version: "1.0.0.0",
  category:
     "attributes",
    // "movements",
    // "other",
    // "general",
  author: "piranha305",
  website: "https://www.construct.net",
  documentation: "https://www.construct.net",
  description: "Experience based level system.",
  // icon: "icon.svg", // defaults to "icon.svg" if omitted
  // addonUrl: "https://www.construct.net/en/make-games/addons/####/XXXX", // displayed in auto-generated docs
  // githubUrl: "https://github.com/skymen/XXXX", // displays latest release version in auto-generated docs
  fileDependencies: [
    /*
    {
      filename: "filename.js", // no need to include "c3runtime/" prefix
      type:
        "copy-to-output"
        "inline-script"
        "external-dom-script"
        "external-runtime-script"
        "external-css"

      // for copy-to-output only
      // fileType: "image/png"
    }
    */
  ],
  info: {
    Set: {
      IsOnlyOneAllowed: false,
      CanBeBundled: true,
      IsDeprecated: false,
    },
  },
  properties: [
    {
      type: "combo",
      id: "experience_scale_mode",
      name: "Experience Scale Mode",
      desc: "Progressive[ExpPool = BaseExp * Scale^(level - 1)]; Constant[ExpPool = BaseExp + ExpScale*(level - 1)]; Custom[set manually in Custorm exp scale property]",
      options: {
        initialValue: "linear",
        items: [
          { "linear": "Linear" },
          { "progressive": "Progressive" },
          { "custom": "Custom" },
        ],
      },
    },
    {
      type: "integer",
      id: "base_experience",
      name: "Base Experience",
      desc: "The amount of experience needed to achieve the second level.",
      options: {
        initialValue: 1000,
        minValue: 0,
      },
    },
    {
      type: "float",
      id: "experience_scale",
      name: "Experience Scale",
      desc: "Experience factor. Different usability for each scaling mode. See Exp-scale-mode property.",
      options: {
        initialValue: 1.2,
        minValue: 0,
      },
    },
    {
      type: "text",
      id: "custom_experience_scale",
      name: "Custom Experience Scale",
      desc: "If Exp-scale-mode set to Custom, set comma separated values of experience pool per level. E.g. \"100,120,150,200,260\" ",
      options: {
        initialValue: "",
      },
    },
    {
      type: "integer",
      id: "max_level",
      name: "Max Level",
      desc: "Maximum possible level or -1 for unlimited",
      options: {
        initialValue: -1,
        minValue: 0,
      },
    },
    {
      type: "combo",
      id: "level_downgrading",
      name: "Level Downgrading",
      desc: "Choose whether level downgrading by losing experience is possible or not.",
      options: {
        initialValue: "disabled",
        items: [
          { "disabled": "Disabled" },
          { "enaled": "Enabled" },
        ],
      },
    }
    /*
    {
      type:
        "integer"
        "float"
        "percent"
        "text"
        "longtext"
        "check"
        "font"
        "combo"
        "group"
        "link"
        "info"

      id: "property_id",
      options: {
        initialValue: 0,
        interpolatable: false,

        // minValue: 0, // omit to disable
        // maxValue: 100, // omit to disable

        // for type combo only
        // items: [
        //   {itemId1: "item name1" },
        //   {itemId2: "item name2" },
        // ],

        // dragSpeedMultiplier: 1, // omit to disable

        // for type link only
        // linkCallback: `function(instOrObj) {}`,
        // linkText: "Link Text",
        // callbackType:
        //   "for-each-instance"
        //   "once-for-type"

        // for type info only
        // infoCallback: `function(inst) {}`,
      },
      name: "Property Name",
      desc: "Property Description",
    }
    */
  ],
  aceCategories: {
    // follows the format id: langName
    // in the ACEs refer to categories using the id, not the name
    general: "General",
  },
  Acts: {
    AddExperience: {
      category: "general",
      forward: "AddExperience",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isAsync: false,
      params: [
        {
          id: "experience",
          name: "Experience",
          desc: "The amount of experience to add.",
          type: "number",
          value: "0",
        },
      ],
      listName: "Add Experience",
      displayText: "{my}: Add experience [i]{0}[/i]",
      description: "Add experience to the current level.",
    },
    SubtractExperience: {
      category: "general",
      forward: "SubtractExperience",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isAsync: false,
      params: [
        {
          id: "experience",
          name: "Experience",
          desc: "The amount of experience to subtract.",
          type: "number",
          value: "0",
        },
      ],
      listName: "Subtract Experience",
      displayText: "{my}: Subtract experience [i]{0}[/i]",
      description: "Subtract experience from the current level.",
    },
    SetExperience: {
      category: "general",
      forward: "SetExperience",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isAsync: false,
      params: [
        {
          id: "experience",
          name: "Experience",
          desc: "The amount of experience to set.",
          type: "number",
          value: "0",
        },
      ],
      listName: "Set Experience",
      displayText: "{my}: Set experience [i]{0}[/i]",
      description: "Set experience to the current level.",
    },
    SetExperienceScale: {
      category: "general",
      forward: "SetExperienceScale",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isAsync: false,
      params: [
        {
          id: "experience_scale",
          name: "Experience Scale",
          desc: "The amount of experience to set.",
          type: "number",
          value: "0",
        },
      ],
      listName: "Set Experience Scale",
      displayText: "{my}: Set experience scale [i]{0}[/i]",
      description: "Set experience scale.",
    },
    SetMaxLevel: {
      category: "general",
      forward: "SetMaxLevel",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isAsync: false,
      params: [
        {
          id: "max_level",
          name: "Max Level",
          desc: "The maximum possible level.",
          type: "number",
          value: "0",
        },
      ],
      listName: "Set Max Level",
      displayText: "{my}: Set max level [i]{0}[/i]",
      description: "Set max level.",
    },
    SetExperienceScaleMode: {
      category: "general",
      forward: "SetExperienceScaleMode",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isAsync: false,
      params: [
        {
          id: "experience_scale_mode",
          name: "Experience Scale Mode",
          desc: "The experience scale mode.",
          type: "combo",
          value: "linear",
          items: [
              { "linear": "Linear" },
              { "progressive": "Progressive" },
              { "custom": "Custom" },
            ],
        },
      ],
      listName: "Set Experience Scale Mode",
      displayText: "{my}: Set experience scale mode [i]{0}[/i]",
      description: "Set experience scale mode.",
    },
    LoadJson: {
      category: "general",
      forward: "LoadJson",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isAsync: false,
      params: [
        {
          id: "json",
          name: "Json",
          desc: "The json string.",
          type: "string",
          value: "",
        },
      ],
      listName: "Load Json",
      displayText: "{my}: Load json [i]{0}[/i]",
      description: "Load json.",
    },
    /*
    SampleAction: {
      // The category of the action as it appears in the add action dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this action
      // Cases where you might not want this are:
      // 1- If the action params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the action in the add action dialog
      highlight: true,

      // Set to true to hide the action in the interface. False by default if not specified.
      deprecated: false,

      // Marks the action as async. Defaults to false if not specified.
      isAsync: false,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the action as it appears in the add action dialog
      listName: "Sample Action",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      // You can also use the {my} tag to include the behavior icon and name.
      displayText: "{my}: Sample action [i]{0}[/i]",

      // The description of the action as it appears in the add action dialog
      description: "This is a sample action",
    },
    */
  },
  Cnds: {
    OnLevelUp: {
      category: "general",
      forward: "OnLevelUp",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isTrigger: true,
      params: [],
      listName: "On Level Up",
      displayText: "{my}: On level up",
      description: "Triggered when the level is changed.",
    },
    OnLevelDown: {
      category: "general",
      forward: "OnLevelDown",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isTrigger: true,
      params: [],
      listName: "On Level Down",
      displayText: "{my}: On level down",
      description: "Triggered when the level is changed.",
    },
    OnLevelChange: {
      category: "general",
      forward: "OnLevelChange",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isTrigger: true,
      params: [],
      listName: "On Level Change",
      displayText: "{my}: On level change",
      description: "Triggered when the level is changed.",
    },
    OnLevelReached: {
      category: "general",
      forward: "OnLevelReached",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isTrigger: true,
      params: [{
        id: "level",
        name: "Level",
        desc: "The level reached.",
        type: "number",
        value: "0",
      }],
      listName: "On Level Reached",
      displayText: "{my}: On level {0} reached",
      description: "Triggered when the level is reached.",
    },
    OnMaxLevelReached: {
      category: "general",
      forward: "OnMaxLevelReached",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isTrigger: true,
      params: [],
      listName: "On Max Level Reached",
      displayText: "{my}: On max level reached",
      description: "Triggered when the max level is reached.",
    },
    OnExperienceIncreased: {
      category: "general",
      forward: "OnExperienceIncreased",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isTrigger: true,
      params: [],
      listName: "On Experience Increased",
      displayText: "{my}: On experience increased",
      description: "Triggered when the experience is increased.",
    },
    OnExperienceDecreased: {
      category: "general",
      forward: "OnExperienceDecreased",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isTrigger: true,
      params: [],
      listName: "On Experience Decreased",
      displayText: "{my}: On experience decreased",
      description: "Triggered when the experience is decreased.",
    },
    OnExperienceChanged: {
      category: "general",
      forward: "OnExperienceChanged",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      isTrigger: true,
      params: [],
      listName: "On Experience Changed",
      displayText: "{my}: On experience changed",
      description: "Triggered when the experience is changed.",
    },
    /*
    SampleCondition: {
      // The category of the action as it appears in the add condition dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this condition
      // Cases where you might not want this are:
      // 1- If the condition params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the condition in the add condition dialog
      highlight: true,

      // Set to true to hide the condition in the interface. False by default if not specified.
      deprecated: false,

      // special conditions properties. These can all be omitted, and they will default to the following values:
      isTrigger: false,
      isFakeTrigger: false,
      isStatic: false,
      isLooping: false,
      isInvertible: true,
      isCompatibleWithTriggers: true,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the condition as it appears in the add condition dialog
      listName: "Sample Condition",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      // You can also use the {my} tag to include the behavior icon and name.
      displayText: "{my}: Sample condition [i]{0}[/i]",

      // The description of the condition as it appears in the add condition dialog
      description: "This is a sample condition",
    },
    */
  },
  Exps: {
    CurrentLevel: {
      category: "general",
      forward: "CurrentLevel",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [],
      returnType: "number",
      displayText: "{my}: Current level",
      description: "Get the current level.",
    },
    MaxLevel: {
      category: "general",
      forward: "MaxLevel",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [],
      returnType: "number",
      displayText: "{my}: Max level",
      description: "Get the max level.",
    },
    TotalExperience: {
      category: "general",
      forward: "TotalExperience",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [],
      returnType: "number",
      displayText: "{my}: Total experience",
      description: "Get the total experience.",
    },
    ExperienceToNextLevel: {
      category: "general",
      forward: "ExperienceToNextLevel",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [],
      returnType: "number",
      displayText: "{my}: Experience to next level",
      description: "Get the experience to next level.",
    },
    LevelExperience: {
      category: "general",
      forward: "LevelExperience",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [],
      returnType: "number",
      displayText: "{my}: Level experience",
      description: "Get the level experience.",
    },
    LevelExperiencePool: {
      category: "general",
      forward: "LevelExperiencePool",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [],
      returnType: "number",
      displayText: "{my}: Level experience pool",
      description: "Get the level experience pool.",
    },
    ProgressToNextLevel: {
      category: "general",
      forward: "ProgressToNextLevel",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [],
      returnType: "number",
      displayText: "{my}: Progress to next level",
      description: "Get the progress to next level.",
    },
    AsJson: {
      category: "general",
      forward: "AsJson",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [],
      returnType: "string",
      displayText: "{my}: As json",
      description: "Get the current state as json.",
    },
    /*
    SampleExpression: {
      // The category of the action as it appears in the expression picker
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this expression
      // Cases where you might not want this are:
      // 1- If you don't want it to appear in the script interface
      // 2- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the expression in the expression picker
      highlight: true,

      // Set to true to hide the expression in the interface. False by default if not specified.
      deprecated: false,

      // The type of the expression.
      returnType:
        - "string"
        - "number"
        - "any" // must be either string or number

      // Set to true if the expression is variadic. False by default if not specified.
      isVariadicParameters: false

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
        },
      ],

      // The description of the expression as it appears in the expression picker
      description: "This is a sample expression",
    },
    */
  },
};
